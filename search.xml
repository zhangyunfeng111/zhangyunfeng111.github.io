<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dart与flutter基础]]></title>
    <url>%2Fzhangyunfeng111.github.io%2F2019%2F09%2F04%2FDart%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[基础篇基本类型var 可以定义变量，如 var tag = “666” ，这和 JS 、 Kotlin 等语言类似，同时 Dart 属于伪动态强类型语言，支持闭包。 Dart 中 number 类型分为 int 和 double ，其中 java 中的 long 对应的也是 Dart 中的 int 类型。Dart 中没有 float 类型。 Dart 下只有 bool 型可以用于 if 等判断，不同于 JS 这种使用方式是不合法的 var g = “null”; if(g){} 。 DART中，switch 支持 String 类型。 Dart 语言对以下类型有特殊的支持: numbers(数值)：int，double strings(字符串) booleans(布尔) lists(列表，也称为数组) maps(映射) runes(在字符串中表示一个Unicode字符) symbols 变量Dart 不需要给变量设置 setter getter 方法， 这和 kotlin 等类似。Dart 中所有的基础类型、类等都继承 Object ，默认值是 NULL， 自带 getter 和 setter ，而如果是 final 或者 const 的话，那么它只有一个 getter 方法。 Dart 中 final 和 const 表示常量，比如 final name = ‘GSY’; const value= 1000000; 同时 static const 组合代表了静态常量。其中 const 的值在编译期确定，final 的值要到运行时才确定。（ps Flutter 在 Release 下是 AOT 模式。） Dart 下的数值，在作为字符串使用时，是需要显式指定的。比如：int i = 0; print(“aaaa” + i); 这样并不支持，需要 print(“aaaa” + i.toString()); 这样使用。这和 Java 与 JS 存在差异。所以在使用动态类型时，需要注意不要把 number 类型当做 String 使用。 DART 中数组等于列表，所以 var list = []; 和 List list = new List() 可以简单看做一样。 方法Dart 下 ?? 、??= 属于操作符，如: AA ?? “999” 表示如果 AA 为空，返回999；AA ??= “999” 表示如果 AA 为空，给 AA 设置成 999。 Dart 方法可以设置 参数默认值 和 指定名称 。比如： getDetail(Sting userName, reposName, {branch = “master”}){} 方法，这里 branch 不设置的话，默认是 “master” 。参数类型 可以指定或者不指定。调用效果： getRepositoryDetailDao(“aaa”, “bbbb”, branch: “dev”); Dart 不像 Java ，没有关键词 public 、private 等修饰符，_下横向直接代表 private ，但是有 @protected 注解。 Dart 中多构造函数，可以通过如下代码实现的。默认构造方法只能有一个，而通过Model.empty() 方法可以创建一个空参数的类，其实方法名称随你喜欢。而变量初始化值时，只需要通过 this.name 在构造方法中指定即可： 1234567891011121314class ModelA &#123; String name; String tag; //默认构造方法，赋值给name和tag ModelA(this.name, this.tag); //返回一个空的ModelA ModelA.empty(); //返回一个设置了name的ModelA ModelA.forName(this.name); &#125; Flutterasync/awaitFlutter 中支持 async/await 。这一点和 ES7 很像，如下代码所示，只是定义的位置不同。同时异步操作也和 ES6 中的Promise 很像，只是 Flutter 中返回的是 Future 对象，通过 then 可以执行下一步。如果返回的还是 Future 便可以 then().then.() 的流式操作了 。 1234567891011121314151617181920///模拟等待两秒，返回OK request() async &#123; await Future.delayed(Duration(seconds: 1)); return &quot;ok!&quot;; &#125; ///得到&quot;ok!&quot;后，将&quot;ok!&quot;修改为&quot;ok from request&quot; doSomeThing() async &#123; String data = await request(); data = &quot;ok from request&quot;; return data; &#125; ///打印结果 renderSome() &#123; doSomeThing().then((value) &#123; print(value); ///输出ok from request &#125;); &#125; Flutter 中 setState 很有 React Native 的既视感，Flutter 中也是通过 state 跨帧实现管理数据状态的，这个后面会详细讲到。 Flutter 中一切皆 Widget 呈现，通过 build方法返回 Widget，这也是和 React Native 中，通过 render 函数返回需要渲染的 component 一样的模式。 Flutter Widget在 Flutter 中，一切的显示都是 Widget 。Widget 是一切的基础，作为响应式的渲染，属于 MVVM 的实现机制。我们可以通过修改数据，再用setState 设置数据，Flutter 会自动通过绑定的数据更新 Widget 。 所以你需要做的就是实现 Widget 界面，并且和数据绑定起来。 Widget 分为 有状态 和 无状态 两种，在 Flutter 中每个页面都是一帧。无状态就是保持在那一帧。而有状态的 Widget 当数据更新时，其实是绘制了新的 Widget，只是 State 实现了跨帧的数据同步保存。 这里有个小 Tip ，当代码框里输入 stl 的时候，可以自动弹出创建无状态控件的模板选项，而输入 stf 的时，就会弹出创建有状态 Widget 的模板选项。 代码格式化的时候，括号内外的逗号都会影响格式化时换行的位置。 如果觉得默认换行的线太短，可以在设置-Editor-Code Style-Dart-Wrapping and Braces-Hard wrap at 设置你接受的数值。 无状态StatelessWidget直接进入主题，下方代码是无状态 Widget 的简单实现。 继承 StatelessWidget，通过 build 方法返回一个布局好的控件。可能现在你还对 Flutter 的内置控件不熟悉，but Don’t worry , take is easy ，后面我们就会详细介绍。这里你只需要知道，一个无状态的 Widget 就是这么简单。 Widget 和 Widget 之间通过 child: 进行嵌套。其中有的 Widget 只能有一个 child，比如下方的 Container ；有的 Widget 可以多个 child ，也就是children:，比如` Column 布局。下方代码便是 Container Widget 嵌套了 Text Widget。 1234567891011121314151617181920import &apos;package:flutter/material.dart&apos;;class DEMOWidget extends StatelessWidget &#123; final String text; //数据可以通过构造方法传递进来 DEMOWidget(this.text); @override Widget build(BuildContext context) &#123; //这里返回你需要的控件 //这里末尾有没有的逗号，对于格式化代码而已是不一样的。 return Container( //白色背景 color: Colors.white, //Dart语法中，?? 表示如果text为空，就返回尾号后的内容。 child: Text(text ?? &quot;这就是无状态DMEO&quot;), ); &#125;&#125; 有状态StatefulWidget继续直插主题，如下代码，是有状态的widget的简单实现。 你需要创建管理的是主要是 State ， 通过 State 的 build 方法去构建控件。在 State 中，你可以动态改变数据，这类似 MVVM 实现，在 setState 之后，改变的数据会触发 Widget 重新构建刷新。而下方代码中，是通过延两秒之后，让文本显示为 “这就变了数值”。 如下代码还可以看出，State 中主要的声明周期有 ：1、initState ：初始化，理论上只有初始化一次，第二篇中会说特殊情况下。2、didChangeDependencies：在 initState 之后调用，此时可以获取其他 State 。3、dispose ：销毁，只会调用一次。 看到没，Flutter 其实就是这么简单！你的关注点只要在：创建你的 StatelessWidget 或者 StatefulWidget 而已。你需要的就是在 build 中堆积你的布局，然后把数据添加到 Widget 中，最后通过 setState 改变数据，从而实现画面变化。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import &apos;dart:async&apos;;import &apos;package:flutter/material.dart&apos;;class DemoStateWidget extends StatefulWidget &#123; final String text; ////通过构造方法传值 DemoStateWidget(this.text); ///主要是负责创建state @override _DemoStateWidgetState createState() =&gt; _DemoStateWidgetState(text);&#125;class _DemoStateWidgetState extends State&lt;DemoStateWidget&gt; &#123; String text; _DemoStateWidgetState(this.text); @override void initState() &#123; ///初始化，这个函数在生命周期中只调用一次 super.initState(); ///定时2秒 new Future.delayed(const Duration(seconds: 1), () &#123; setState(() &#123; text = &quot;这就变了数值&quot;; &#125;); &#125;); &#125; @override void dispose() &#123; ///销毁 super.dispose(); &#125; @override void didChangeDependencies() &#123; ///在initState之后调 Called when a dependency of this [State] object changes. super.didChangeDependencies(); &#125; @override Widget build(BuildContext context) &#123; return Container( child: Text(text ?? &quot;这就是有状态DMEO&quot;), ); &#125;&#125; Flutter 布局Flutter 中拥有需要将近30种内置的 布局Widget，其中常用有 Container、Padding、Center、Flex、Stack、Row、Column、ListView 等，下面简单讲解它们的特性和使用。 类型 作用特点 Container 只有一个子 Widget。默认充满，包含了padding、margin、color、宽高、decoration 等配置。 Padding 只有一个子 Widget。只用于设置Padding，常用于嵌套child，给child设置padding。 Center 只有一个子 Widget。只用于居中显示，常用于嵌套child，给child设置居中 Stack 可以有多个子 Widget。 子Widget堆叠在一起。 Column 可以有多个子 Widget。垂直布局。 Row 可以有多个子 Widget。水平布局。 Expanded 只有一个子 Widget。在 Column 和 Row 中充满。 ListView 可以有多个子 Widget。自己意会吧。 Container ：最常用的默认布局！只能包含一个child:，支持配置 padding,margin,color,宽高,decoration（一般配置边框和阴影）等配置，在 Flutter 中，不是所有的控件都有 宽高、padding、margin、color 等属性，所以才会有 Padding、Center 等 Widget 的存在。 1234567891011121314new Container( ///四周10大小的maring margin: EdgeInsets.all(10.0), height: 120.0, width: 500.0, ///透明黑色遮罩 decoration: new BoxDecoration( ///弧度为4.0 borderRadius: BorderRadius.all(Radius.circular(4.0)), ///设置了decoration的color，就不能设置Container的color。 color: Colors.black, ///边框 border: new Border.all(color: Color(GSYColors.subTextColor), width: 0.3)), child:new Text(&quot;666666&quot;)); Column、Row 绝对是必备布局， 横竖布局也是日常中最常见的场景。如下方所示，它们常用的有这些属性配置：主轴方向是 start 或 center 等；副轴方向方向是 start 或 center 等；mainAxisSize 是充满最大尺寸，或者只根据子 Widget 显示最小尺寸。 123456//主轴方向，Column的竖向、Row我的横向mainAxisAlignment: MainAxisAlignment.start, //默认是最大充满、还是根据child显示最小大小mainAxisSize: MainAxisSize.max,//副轴方向，Column的横向、Row我的竖向crossAxisAlignment :CrossAxisAlignment.center, Expanded 在 Column 和 Row 中代表着平均充满，当有两个存在的时候默认均分充满。同时页可以设置 flex 属性决定比例。 12345678910111213new Column( ///主轴居中,即是竖直向居中 mainAxisAlignment: MainAxisAlignment.center, ///大小按照最小显示 mainAxisSize : MainAxisSize.min, ///横向也居中 crossAxisAlignment : CrossAxisAlignment.center, children: &lt;Widget&gt;[ ///flex默认为1 new Expanded(child: new Text(&quot;1111&quot;), flex: 2,), new Expanded(child: new Text(&quot;2222&quot;)), ],); 接下来我们来写一个复杂一些的控件。首先我们创建一个私有方法_getBottomItem，返回一个 Expanded Widget，因为后面我们需要将这个方法返回的 Widget 在 Row 下平均充满。 如代码中注释，布局内主要是现实一个居中的Icon图标和文本，中间间隔5.0的 padding： 123456789101112131415161718192021222324252627282930313233343536373839///返回一个居中带图标和文本的Item_getBottomItem(IconData icon, String text) &#123; ///充满 Row 横向的布局 return new Expanded( flex: 1, ///居中显示 child: new Center( ///横向布局 child: new Row( ///主轴居中,即是横向居中 mainAxisAlignment: MainAxisAlignment.center, ///大小按照最大充满 mainAxisSize : MainAxisSize.max, ///竖向也居中 crossAxisAlignment : CrossAxisAlignment.center, children: &lt;Widget&gt;[ ///一个图标，大小16.0，灰色 new Icon( icon, size: 16.0, color: Colors.grey, ), ///间隔 new Padding(padding: new EdgeInsets.only(left:5.0)), ///显示文本 new Text( text, //设置字体样式：颜色灰色，字体大小14.0 style: new TextStyle(color: Colors.grey, fontSize: 14.0), //超过的省略为...显示 overflow: TextOverflow.ellipsis, //最长一行 maxLines: 1, ), ], ), ), );&#125; 接着我们把上方的方法，放到新的布局里。如下流程和代码： 首先是 Container包含了Card，用于快速简单的实现圆角和阴影。 然后接下来包含了FlatButton实现了点击，通过Padding实现了边距。 接着通过Column垂直包含了两个子Widget，一个是Container、一个是Row。 Row 内使用的就是_getBottomItem方法返回的 Widget ，效果如下图。 12345678910111213141516171819202122232425262728293031323334353637383940414243@override Widget build(BuildContext context) &#123; return new Container( ///卡片包装 child: new Card( ///增加点击效果 child: new FlatButton( onPressed: ()&#123;print(&quot;点击了哦&quot;);&#125;, child: new Padding( padding: new EdgeInsets.only(left: 0.0, top: 10.0, right: 10.0, bottom: 10.0), child: new Column( mainAxisSize: MainAxisSize.min, children: &lt;Widget&gt;[ ///文本描述 new Container( child: new Text( &quot;这是一点描述&quot;, style: TextStyle( color: Color(GSYColors.subTextColor), fontSize: 14.0, ), ///最长三行，超过 ... 显示 maxLines: 3, overflow: TextOverflow.ellipsis, ), margin: new EdgeInsets.only(top: 6.0, bottom: 2.0), alignment: Alignment.topLeft), new Padding(padding: EdgeInsets.all(10.0)), ///三个平均分配的横向图标文字 new Row( crossAxisAlignment: CrossAxisAlignment.start, children: &lt;Widget&gt;[ _getBottomItem(Icons.star, &quot;1000&quot;), _getBottomItem(Icons.link, &quot;1000&quot;), _getBottomItem(Icons.subject, &quot;1000&quot;), ], ), ], ), ))), ); &#125; Flutter 中，你的布局很多时候就是这么一层一层嵌套出来的，当然还有其他更高级的布局方式，这里就先不展开了。 Flutter 页面Flutter 中除了布局的 Widget，还有交互显示的 Widget 和完整页面呈现的Widget。其中常见的有 MaterialApp、Scaffold、Appbar、Text、Image、FlatButton等。下面简单介绍这些 Wdiget，并完成一个页面。 类型 作用特点 MaterialApp 一般作为APP顶层的主页入口，可配置主题，多语言，路由等。 Scaffold 一般用户页面的承载Widget，包含appbar、snackbar、drawer等material design的设定。 Appbar 一般用于Scaffold的appbar ，内有标题，二级页面返回按键等，当然不止这些，tabbar等也会需要它 。 Text 显示文本，几乎都会用到，主要是通过style设置TextStyle来设置字体样式等。 RichText 富文本，通过设置TextSpan，可以拼接出富文本场景。 TextField 文本输入框 ：new TextField(controller: //文本控制器, obscureText: “hint文本”); Image Image FlatButton 按键点击: new FlatButton(onPressed: () {},child: new Container()); 那么再次直插主题实现一个简单完整的页面试试。如下方代码： 首先我们创建一个StatefulWidget：DemoPage。 然后在 _DemoPageState中，通过build创建了一个Scaffold。 Scaffold内包含了一个AppBar和一个ListView。 AppBar类似标题了区域，其中设置了 title为 Text Widget。 body是ListView,返回了20个之前我们创建过的 DemoItem Widget。 1234567891011121314 void main() &#123; runApp(new DemoApp());&#125;class DemoApp extends StatelessWidget &#123; DemoApp() : super(key: key); @override Widget build(BuildContext context) &#123; return new MaterialApp(home: DemoPage()); &#125;&#125; 参考：Flutter完整开发实战详解(一、Dart语言和Flutter基础) | 掘金技术征文]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Dart、flutter、前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聚类算法]]></title>
    <url>%2Fzhangyunfeng111.github.io%2F2019%2F09%2F01%2F%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[简单介绍1、聚类的概念聚类就是按照某个特定标准(如距离准则)把一个数据集分割成不同的类或簇，使得同一个簇内的数据对象的相似性尽可能大，同时不在同一个簇中的数据对象的差异性也尽可能地大。即聚类后同一类的数据尽可能聚集到一起，不同数据尽量分离。 2、聚类和分类的区别 Clustering (聚类)，简单地说就是把相似的东西分到一组，聚类的时候，我们并不关心某一类是什么，我们需要实现的目标只是把相似的东西聚到一起。因此，一个聚类算法通常只需要知道如何计算相似度就可以开始工作了，因此 clustering 通常并不需要使用训练数据进行学习，这在Machine Learning中被称unsupervised learning (无监督学习)。 Classification (分类)，对于一个classifier，通常需要你告诉它“这个东西被分为某某类”这样一些例子，理想情况下，一个 classifier 会从它得到的训练集中进行“学习”，从而具备对未知数据进行分类的能力，这种提供训练数据的过程通常叫做supervised learning (监督学习)。 3、衡量聚类算法优劣的标准 算法是否需要预设条件：是否需要预先知道聚类个数，是否需要用户给出领域知识； 算法的数据输入属性：算法处理的结果与数据输入的顺序是否相关，也就是说算法是否独立于数据输入顺序；算法处理有很多属性数据的能力，也就是对数据维数是否敏感，对数据的类型有无要求； 算法的处理能力：处理大的数据集的能力（即算法复杂度）；处理数据噪声的能力；处理任意形状，包括有间隙的嵌套的数据的能力。 4、聚类算法有哪些？ 基于层次聚类（BIRCH） 基于划分聚类（k-means） 基于密度聚类（DBSCAN） 基于网格聚类（STING） 基于模型聚类（高斯混合模型GMM（概率模型）、SOM（神经网络）） 基于模糊聚类（模糊C均值） 其他聚类（基于约束的方法、量子聚类、核聚类、谱聚类） 算法介绍1. 基于层次的方法（Hierarchical methods）基本思想层次聚类主要有两种类型：合并的层次聚类和分裂的层次聚类。前者是一种自底向上的层次聚类算法，从最底层开始，每一次通过合并最相似的聚类来形成上一层次中的聚类，整个当全部数据点都合并到一个聚类的时候停止或者达到某个终止条件而结束，大部分层次聚类都是采用这种方法处理。后者是采用自顶向下的方法，从一个包含全部数据点的聚类开始，然后把根节点分裂为一些子聚类，每个子聚类再递归地继续往下分裂，直到出现只包含一个数据点的单节点聚类出现，即每个聚类中仅包含一个数据点。 算法流程以下流程以自下向上为例。 将每个对象看作一类，计算两两之间的最小距离； 将距离最小的两个类合并成一个新类； 重新计算新类与所有类之间的距离； 重复2、3，直到所有类最后合并成一类算法优缺点 优点：可解释性好（如当需要创建一种分类法时）；还有些研究表明这些算法能产生高质量的聚类，也会应用在上面说的先取K比较大的K-means后的合并阶段；还有对于K-means不能解决的非球形族就可以解决了。 缺点：时间复杂度高啊，o^(m3)，改进后的算法也有o(m^(2lgm))，m为点的个数；贪心算法的缺点，一步错步步错；同K-means。 常见的算法及改进该聚类算法因为计算复杂度比较大适用于小数量级，如对中国省会城市聚类。改进的算法有BIRCH（Balanced Iterative Reducing and Clustering Using Hierarchies）主要是在数据体量很大的时候使用，而且数据类型是numerical。Chameleon（A Hierarchical Clustering Algorithm Using Dynamic Modeling）里用到的linkage是kNN（k-nearest-neighbor）算法，并以此构建一个graph，Chameleon的聚类效果被认为非常强大，比BIRCH好用，但运算复杂还是很高，O(n^2)。看个Chameleon的聚类效果图，其中一个颜色代表一类，可以看出来是可以处理非常复杂的形状的。 2、基于划分的方法（Partition-based methods）2.1基本思想基于划分的方法：其原理简单来说就是，想象你有一堆散点需要聚类，想要的聚类效果就是“类内的点都足够近，类间的点都足够远”。首先你要确定这堆散点最后聚成几类，然后挑选几个点作为初始中心点，再然后依据预先定好的启发式算法（heuristic algorithms）给数据点做迭代重置（iterative relocation），直到最后到达“类内的点都足够近，类间的点都足够远”的目标效果。也正是根据所谓的“启发式算法”，形成了k-means算法及其变体包括k-medoids、k-modes、k-medians、kernel k-means等算法。 2.2算法流程经典K-means算法流程： 随机地选择k个对象，每个对象初始地代表了一个簇的中心； 对剩余的每个对象，根据其与各簇中心的距离，将它赋给最近的簇； 重新计算每个簇的平均值，更新为新的簇中心； 不断重复2、3，直到准则函数收敛。 2.3算法优缺点 优点：对于大型数据集也是简单高效、时间复杂度、空间复杂度低。 缺点：最重要是数据集大时结果容易局部最优；需要预先设定K值，对最先的K个点选取很敏感；对噪声和离群值非常敏感；只用于numerical类型数据；不能解决非凸（non-convex）数据。 2.4常见的算法及改进k-means对初始值的设置很敏感，所以有了k-means++、intelligent k-means、genetic k-means。k-means对噪声和离群值非常敏感，所以有了k-medoids和k-medians。k-means只用于numerical类型数据，不适用于categorical类型数据，所以k-modes。k-means不能解决非凸（non-convex）数据，所以有了kernel k-means。另外，很多教程都告诉我们Partition-based methods聚类多适用于中等体量的数据集，但我们也不知道“中等”到底有多“中”，所以不妨理解成，数据集越大，越有可能陷入局部最小。下图显示的就是面对非凸，k-means和kernel k-means的不同效果。 3、基于密度的方法(Density-based methods)3.1基本思想基于密度的方法：k-means解决不了不规则形状的聚类。于是就有了Density-based methods来系统解决这个问题。该方法同时也对噪声数据的处理比较好。其原理简单说画圈儿，其中要定义两个参数，一个是圈儿的最大半径，一个是一个圈儿里最少应容纳几个点。只要邻近区域的密度（对象或数据点的数目）超过某个阈值，就继续聚类,最后在一个圈里的，就是一个类。DBSCAN（Density-Based Spatial Clustering of Applications with Noise）就是其中的典型. 3.2算法流程输入：半径ϵ，给定点在ϵ邻域内成为核心对象的最小邻域点数MinPts，数据集D输出：目标类簇集合Repeat:(1) 判断输入点是否为核心对象（由ϵ和MinPts判断）(2) 找出核心对象的ϵ邻域中的所有直接密度可达点Until 所有输入点都判断完毕Repeat:针对所有核心对象的ϵ邻域内所有直接密度可达点找到最大密度相连对象集合，中间涉及到一些密度可达对象的合并Until 所有核心对象的ϵ邻域都遍历完毕 DBSCAN使用的方法很简单，它任意选择一个没有类别的核心对象作为种子，然后找到所有这个核心对象能够密度可达的样本集合，即为一个聚类簇。接着继续选择另一个没有类别的核心对象去寻找密度可达的样本集合，这样就得到另一个聚类簇。一直运行到所有核心对象都有类别为止。还有就是密度可达对象的合并。 DBSCAN聚类算法原理的基本要点 根据经验计算半径Eps：根据得到的所有点的k-距离集合E，对集合E进行升序排序后得到k-距离集合E’，需要拟合一条排序后的E’集合中k-距离的变化曲线图，然后绘出曲线，通过观察，将急剧发生变化的位置所对应的k-距离的值，确定为半径Eps的值。 根据经验计算最少点的数量MinPts：确定MinPts的大小，实际上也是确定k-距离中k的值，DBSCAN算法取k=4，则MinPts=4。 如果对经验值聚类的结果不满意，可以适当调整Eps和MinPts的值，经过多次迭代计算对比，选择最合适的参数值。可以看出，如果MinPts不变，Eps取得值过大，会导致大多数点都聚到同一个簇中，Eps过小，会导致一个簇的分裂；如果Eps不变，MinPts的值取得过大，会导致同一个簇中点被标记为噪声点，MinPts过小，会导致发现大量的核心点。 我们需要知道的是，DBSCAN算法，需要输入2个参数，这两个参数的计算都来自经验知识。半径Eps的计算依赖于计算k-距离，DBSCAN取k=4，也就是设置MinPts=4，然后需要根据k-距离曲线，根据经验观察找到合适的半径Eps的值。 3.3算法优缺点 优点：对噪声不敏感；能发现任意形状的聚类。 缺点：聚类的结果与参数有很大的关系；DBSCAN用固定参数识别聚类，但当聚类的稀疏程度不同时，相同的判定标准可能会破坏聚类的自然结构，即较稀的聚类会被划分为多个类或密度较大且离得较近的类会被合并成一个聚类。 3.4常见的算法及改进DBSCAN对这两个参数的设置非常敏感。DBSCAN的扩展叫OPTICS（Ordering Points To Identify Clustering Structure）通过优先对高密度（high density）进行搜索，然后根据高密度的特点设置参数，改善了DBSCAN的不足。下图就是表现了DBSCAN对参数设置的敏感，你们可以感受下。 4、基于网络的方法（Grid-based methods）4.1基本思想基于网络的方法：这类方法的原理就是将数据空间划分为网格单元，将数据对象集映射到网格单元中，并计算每个单元的密度。根据预设的阈值判断每个网格单元是否为高密度单元，由邻近的稠密单元组形成”类“。 4.2算法流程这些算法用不同的网格划分方法，将数据空间划分成为有限个单元（cell）的网格结构,并对网格数据结构进行了不同的处理，但核心步骤是相同的：1、 划分网格2、 使用网格单元内数据的统计信息对数据进行压缩表达 (计算每个单元的密度)3、 基于这些统计信息判断高密度网格单元4、 最后将相连的高密度网格单元识别为簇 4.3算法优缺点 优点：速度很快，因为其速度与数据对象的个数无关，而只依赖于数据空间中每个维上单元的个数。 缺点：参数敏感、无法处理不规则分布的数据、维数灾难等；这种算法效率的提高是以聚类结果的精确性为代价的。经常与基于密度的算法结合使用。4.4常见的算法及改进STING（STatistical INformation Grid）算法、WAVE-CLUSTER算法和CLIQUE（CLustering In QUEst）是该类方法中的代表性算法。下图是CLIQUE的一个例子： 5、基于模型的方法（Model-based methods）5.1基本思想基于模型的方法：为每簇假定了一个模型，寻找数据对给定模型的最佳拟合，这一类方法主要是指基于概率模型的方法和基于神经网络模型的方法，尤其以基于概率模型的方法居多。这里的概率模型主要指概率生成模型（generative Model），同一”类“的数据属于同一种概率分布，即假设数据是根据潜在的概率分布生成的。其中最典型、也最常用的方法就是高斯混合模型（GMM，Gaussian Mixture Models）。基于神经网络模型的方法主要就是指SOM（Self Organized Maps）了，也是我所知的唯一一个非监督学习的神经网络了。下图表现的就是GMM的一个demo，里面用到EM算法来做最大似然估计。 5.2算法流程【以SOM为例】SOM神经网络是由芬兰神经网络专家Kohonen教授提出的，该算法假设在输入对象中存在一些拓扑结构或顺序，可以实现从输入空间(n维)到输出平面(2维)的降维映射，其映射具有拓扑特征保持性质,与实际的大脑处理有很强的理论联系。SOM网络包含输入层和输出层。输入层对应一个高维的输入向量，输出层由一系列组织在2维网格上的有序节点构成，输入节点与输出节点通过权重向量连接。学习过程中，找到与之距离最短的输出层单元，即获胜单元，对其更新。同时，将邻近区域的权值更新，使输出节点保持输入向量的拓扑特征。算法流程：1、网络初始化，对输出层每个节点权重赋初值；2、将输入样本中随机选取输入向量，找到与输入向量距离最小的权重向量；3、定义获胜单元，在获胜单元的邻近区域调整权重使其向输入向量靠拢；4、提供新样本、进行训练；5、收缩邻域半径、减小学习率、重复，直到小于允许值，输出聚类结果。 5.3算法优缺点 优点：对”类“的划分不那么”坚硬“，而是以概率形式表现，每一类的特征也可以用参数来表达。 缺点：执行效率不高，特别是分布数量很多并且数据量很少的时候。 5.4常见的算法及改进基于概率模型的最典型、也最常用的方法就是高斯混合模型（GMM，Gaussian Mixture Models）。基于神经网络模型的方法主要就是指SOM（Self Organized Maps）了，也是我所知的唯一一个非监督学习的神经网络了。 6、基于模糊的聚类（FCM模糊聚类）1965年美国加州大学柏克莱分校的扎德教授第一次提出了‘集合’的概念。经过十多年的发展，模糊集合理论渐渐被应用到各个实际应用方面。为克服非此即彼的分类缺点，出现了以模糊集合论为数学基础的聚类分析。用模糊数学的方法进行聚类分析，就是模糊聚类分析。基于模糊集理论的聚类方法，样本以一定的概率属于某个类。比较典型的有基于目标函数的模糊聚类方法、基于相似性关系和模糊关系的方法、基于模糊等价关系的传递闭包方法、基于模 糊图论的最小支撑树方法，以及基于数据集的凸分解、动态规划和难以辨别关系等方法。FCM算法是一种以隶属度来确定每个数据点属于某个聚类程度的算法。该聚类算法是传统硬聚类算法的一种改进。 6.2算法流程FCM模糊聚类算法流程：1、 标准化数据矩阵；2、 建立模糊相似矩阵，初始化隶属矩阵；3、 算法开始迭代，直到目标函数收敛到极小值；4、 根据迭代结果，由最后的隶属矩阵确定数据所属的类，显示最后的聚类结果。FCM算法需要两个参数一个是聚类数目C，另一个是参数m。一般来讲C要远远小于聚类样本的总个数，同时要保证C&gt;1。对于m，它是一个控制算法的柔性的参数，如果m过大，则聚类效果会很次，而如果m过小则算法会接近HCM聚类算法。算法的输出是C个聚类中心点向量和C*N的一个模糊划分矩阵，这个矩阵表示的是每个样本点属于每个类的隶属度。根据这个划分矩阵按照模糊集合中的最大隶属原则就能够确定每个样本点归为哪个类。聚类中心表示的是每个类的平均特征，可以认为是这个类的代表点。 6.3算法优缺点 优点：从算法的推导过程中我们不难看出，算法对于满足正态分布的数据聚类效果会很好，另外，算法对孤立点是敏感的。 缺点：由于不能确保FCM收敛于一个最优解。算法的性能依赖于初始聚类中心。因此，我们要么用另外的快速算法确定初始聚类中心，要么每次用不同的初始聚类中心启动该算法，多次运行FCM。 6.4常见的算法及改进模糊C均值（简称FCM）聚类算法是HCM聚类算法的改进。 7、其他聚类除此以外还有一些其他新的发展方法，在此只简要介绍。 7.1基于约束的方法真实世界中的聚类问题往往是具备多种约束条件的 , 然而由于在处理过程中不能准确表达相应的约束条件、不能很好地利用约束知识进行推理以及不能有效利用动态的约束条件 , 使得这一方法无法得到广泛的推广和应用。这里的约束可以是对个体对象的约束 , 也可以是对聚类参数的约束 , 它们均来自相关领域的经验知识。该方法的一个重要应用在于对存在障碍数据的二维空间数据进行聚类。 COD (Clustering with Ob2structed Distance) 就是处理这类问题的典型算法 , 其主要思想是用两点之间的障碍距离取代了一般的欧氏距离来计算其间的最小距离。 7.2量子聚类：受物理学中量子机理和特性启发，可以用量子理论解决聚类记过依赖于初值和需要指定类别数的问题。一个很好的例子就是基于相关点的 Pott 自旋和统计机理提出的量子聚类模型。它把聚类问题看做一个物理系统。并且许多算例表明，对于传统聚类算法无能为力的几种聚类问题，该算法都得到了比较满意的结果。 7.3核聚类核聚类方法增加了对样本特征的优化过程，利用 Mercer 核 把输入空间的样本映射到高维特征空间，并在特征空间中进行聚类。核聚类方法是普适的，并在性能上优于经典的聚类算法，它通过非线性映射能够较好地分辨、提取并放大有用的特征，从而实现更为准确的聚类；同时，算法的收敛速度也较快。在经典聚类算法失效的情况下，核聚类算法仍能够得到正确的聚类。代表算法有SVDD算法，SVC算法。 7.4谱聚类首先根据给定的样本数据集定义一个描述成对数据点相似度的亲合矩阵,并计算矩阵的特征值和特征向量,然后选择合适的特征向量聚类不同的数据点。谱聚类算法最初用于计算机视觉、VLSI设计等领域,最近才开始用于机器学习中,并迅速成为国际上机器学习领域的研究热点。谱聚类算法建立在图论中的谱图理论基础上,其本质是将聚类问题转化为图的最优划分问题,是一种点对聚类算法。 三、方法扩展1、数据简化方法其实上面提到的很多算法就是对数据做了简化，才得以具备处理大规模数据的能力，比如BIRCH。但其实你可以任意组合，所以理论上把数据简化的方法和上面提到的十几种聚类算法结合使用，可以有上百个算法了。（1）变换（Data Transformation）：离散傅里叶变换（Discrete Fourier Transformation）可以提取数据的频域（frequency domain）信息，离散小波变换（Discrete Wavelet Transformation）除了频域之外，还可以提取到时域（temporal domain）信息。（2）降维（Dimensionality Reduction）：在降维的方法中，PCA（Principle Component Analysis）和SVD（Singular Value Decomposition）作为线性方法，受到最广泛的应用。还有像MDS（Multi-Dimensional Scaling）什么的，不过只是作为PCA的一个扩展，给我的感觉是中看不中用。这几个方法局限肯定是无法处理非线性特征明显的数据。处理非线性降维的算法主要是流形学习（Manifold Learning），这又是一大块内容，里面集中常见的算法包括ISOMAP、LLE（Locally Linear Embedding）、MVU（Maximum variance unfolding）、Laplacian eigenmaps、Hessian eigenmaps、Kernel PCA、Probabilistic PCA等等。流形学习还是挺有趣的，而且一直在发展。关于降维在聚类中的应用，最著名的应该就是谱聚类（Spectral Clustering），就是先用Laplacian eigenmaps对数据降维（简单地说，就是先将数据转换成邻接矩阵或相似性矩阵，再转换成Laplacian矩阵，再对Laplacian矩阵进行特征分解，把最小的K个特征向量排列在一起），然后再使用k-means完成聚类。谱聚类是个很好的方法，效果通常比k-means好，计算复杂度还低，这都要归功于降维的作用。（3）抽样（Sampling）：最常用的就是随机抽样（Random Sampling）咯，如果你的数据集特别大，随机抽样就越能显示出它的低复杂性所带来的好处。比如CLARA（Clustering LARge Applications）就是因为k-medoids应对不了大规模的数据集，所以采用sampling的方法。一般抽样法采用的不多。 2、相似性衡量前面提到聚类其实就是比较相似性的。（其实，本部分可能放到前面第一部分会好些。）相似性衡量又可以细分为直接法和间接法（答主自己取的名字，求轻拍）：直接法是直接求取input data的相似性，间接法是求取data中提取出的features的相似性。但无论是求data还是feature的相似性，方法都是这么几种：（1）距离。距离主要就是指Minkovski距离。这个名字虽然听起来陌生，但其算法就是Lp norm的算法，如果是L1 norm，那就是绝对值/曼哈顿距离（Manhattan distance）；如果是L2 norm，那就是著名的欧式距离（Euclidean distance）了，也是应用最广泛的；如果L无穷范式，supremum距离，好像也有叫切比雪夫距离的，但就很少有人用了。另外，还有Mahalanobis距离，目前来看主要应用于Gaussian Mixture Model（GMM），还有Lance&amp;Williams距离等等，但几乎没见过求距离的时候会专门用这个的。（2）相似系数。主要有夹角余弦和相关系数。相关系数的应用也非常广泛，其主要优势是它不受原线性变换的影响，而且可以轻松地转换为距离，但其运算速度要比距离法慢得多，当维数很高的时候。（3）核函数K(x,y)。定义在RdXRdRdXRd上的二元函数，本质上也是反映x和y的距离。核函数的功能就是把数据从低维空间投影（project）到高维空间去。(4)DTW（dynamic time warping）。这是一种非常特殊的距离算法，它可以计算两个不同长度的向量的距离，也可以对两对向量中不同时间段内的数据做匹配。DTW主要用在时间序列的部分场合里。 四、参考资料知乎https://www.zhihu.com/question/34554321四种聚类方法比较http://blog.csdn.net/zhoubl668/article/details/7881313基于网格的聚类算法https://www.qcloud.com/community/article/539270FCM聚类算法http://blog.csdn.net/sin_geek/article/details/22896197https://www.cnblogs.com/sddai/p/6259553.html]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>聚类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DTW动态时间规整]]></title>
    <url>%2Fzhangyunfeng111.github.io%2F2019%2F08%2F31%2FDTW%E5%8A%A8%E6%80%81%E6%97%B6%E9%97%B4%E8%A7%84%E6%95%B4%2F</url>
    <content type="text"><![CDATA[概述DTW可以计算两个时间序列的相似度，尤其适用于不同长度、不同节奏的时间序列 解释Dynamic Time Warping（DTW）诞生有一定的历史了（日本学者Itakura提出），它出现的目的也比较单纯，是一种衡量两个长度不同的时间序列的相似度的方法。应用也比较广，主要是在模板匹配中，比如说用在孤立词语音识别（识别两段语音是否表示同一个单词），手势识别，数据挖掘和信息检索等中。 1、DTW将自动warping扭曲时间序列（即在时间轴上进行局部的缩放），使得两个序列的形态尽可能的一致，得到最大可能的相似度。2、DTW采用了动态规划DP（dynamic programming）的方法来进行时间规整的计算，可以说，动态规划方法在时间规整问题上的应用就是DTW。 feature to feature在时间序列中，需要比较相似性的两段时间序列的长度可能并不相等，在语音识别领域表现为不同人的语速不同。因为语音信号具有相当大的随机性，即使同一个人在不同时刻发同一个音，也不可能具有完全的时间长度。而且同一个单词内的不同音素的发音速度也不同，比如有的人会把“A”这个音拖得很长，或者把“i”发的很短。在这些复杂情况下，使用传统的欧几里得距离无法有效地求的两个时间序列之间的距离（或者相似性）。 例如图A所示，实线和虚线分别是同一个词“pen”的两个语音波形（在y轴上拉开了，以便观察）。可以看到他们整体上的波形形状很相似，但在时间轴上却是不对齐的。例如在第20个时间点的时候，实线波形的a点会对应于虚线波形的b’点，这样传统的通过比较距离来计算相似性很明显不靠谱。因为很明显，实线的a点对应虚线的b点才是正确的。而在图B中，DTW就可以通过找到这两个波形对齐的点，这样计算它们的距离才是正确的。例如图A所示，实线和虚线分别是同一个词“pen”的两个语音波形（在y轴上拉开了，以便观察）。可以看到他们整体上的波形形状很相似，但在时间轴上却是不对齐的。例如在第20个时间点的时候，实线波形的a点会对应于虚线波形的b’点，这样传统的通过比较距离来计算相似性很明显不靠谱。因为很明显，实线的a点对应虚线的b点才是正确的。而在图B中，DTW就可以通过找到这两个波形对齐的点，这样计算它们的距离才是正确的。 那如果才知道两个波形是对齐了呢？也就是说怎么样的warping才是正确的？直观上理解，当然是warping一个序列后可以与另一个序列重合recover。这个时候两个序列中所有对应点的距离之和是最小的。所以从直观上理解，warping的正确性一般指“feature to feature”的对齐。 动态时间规整DTW线性缩放动态时间规整DTW是一个典型的优化问题，它用满足一定条件的的时间规整函数W(n)描述测试模板和参考模板的时间对应关系，求解两模板匹配时累计距离最小所对应的规整函数。 假设我们有两个时间序列Q和C，他们的长度分别是n和m：（实际语音匹配运用中，一个序列为参考模板，一个序列为测试模板，序列中的每个点的值为语音序列中每一帧的特征值。例如语音序列Q共有n帧，第i帧的特征值（一个数或者一个向量）是qi。至于取什么特征，在这里不影响DTW的讨论。我们需要的是匹配这两个语音序列的相似性，以达到识别我们的测试语音是哪个词） Q = q1,q2,…,qi,…, qn ;C = c1,c2,…, cj,…, cm ; 首先，我们依然采用两个序列中每一对“点”之间的距离来计算形似度，即使两个序列中的点的个数可能不一样。不过，因为可以warping规整时间轴，所以，我们并不是在两个序列中依次取一对点来计算距离，而是每个点有可能对应于另一个序列中的多个点。从上面图B可以看到这种一对多的情况。 当然，这种warping有一定要求，每个点都必须用到，不可跳过，要按照原始的次序，点对不可交叉。即要满足下面描述的 边界条件、连续性、单调性。 关于每一对点的距离计算，这个距离的算法并无规定，依赖于每个“点”的性质来选择，一个“点”可以是单个数值，也可以是一个多维向量。在简单的情况下，可以计算两个点的欧氏距离作为这一对点的距离。 理论上可以穷举两个序列的所有可能的warping 形式，逐一计算两者距离，距离最小的就是所要求的warping，但这样计算量太大，所以采用动态规划的方法来高效的完成计算。 动态规划我们需要将连个序列对齐。最简单的对齐方式就是线性缩放了。把短的序列线性放大到和长序列一样的长度再比较，或者把长的线性缩短到和短序列一样的长度再比较。但是这样的计算没有考虑到语音中各个段在不同情况下的持续时间会产生或长或短的变化，因此识别效果不可能最佳。因此更多的是采用动态规划（dynamic programming）的方法。 为了对齐这两个序列，我们需要构造一个n x m的矩阵网格，矩阵元素(i, j)表示qi和cj两个点的距离d(qi, cj)（也就是序列Q的每一个点和C的每一个点之间的相似度，距离越小则相似度越高。这里先不管顺序），一般采用欧式距离，d(qi,cj)= (qi-cj)2（也可以理解为失真度）。每一个矩阵元素(i, j)表示点qi和cj的对齐。DP算法可以归结为寻找一条通过此网格中若干格点的路径，路径通过的格点即为两个序列进行计算的对齐的点。那么这条路径我们怎么找到呢？那条路径才是最好的呢？也就是刚才那个问题，怎么样的warping才是最好的。 我们把这条路径定义为warping path规整路径，并用W来表示， W的第k个元素定义为wk=(i,j)k，定义了序列Q和C的映射。这样我们有：首先，这条路径不是随意选择的，需要满足以下几个约束： 1）边界条件：w1=(1,1)和wK=(m, n)。任何一种语音的发音快慢都有可能变化，但是其各部分的先后次序不可能改变，因此所选的路径必定是从左下角出发，在右上角结束。 2）连续性：如果wk-1=(a’, b’)，那么对于路径的下一个点wk=(a, b)需要满足 (a-a’) &lt;=1和 (b-b’) &lt;=1。也就是不可能跨过某个点去匹配，只能和自己相邻的点对齐。这样可以保证Q和C中的每个坐标都在W中出现。 3）单调性：如果wk-1=(a’, b’)，那么对于路径的下一个点wk=(a, b)需要满足0&lt;=(a-a’)和0&lt;= (b-b’)。这限制W上面的点必须是随着时间单调进行的。以保证图B中的虚线不会相交。 结合连续性和单调性约束，每一个格点的路径就只有三个方向了。例如如果路径已经通过了格点(i, j)，那么下一个通过的格点只可能是下列三种情况之一：(i+1, j)，(i, j+1)或者(i+1, j+1)。满足上面这些约束条件的路径可以有指数个，然后我们感兴趣的是使得下面的规整代价最小的路径：分母中的K主要是用来对不同的长度的规整路径做补偿。因为不同的路径其长短不同，较长的路径有较多的“点对”，会有较多的距离累加上去，所以总距离除以K得到单位路径的距离。 我们的目的是什么？或者说DTW的思想是什么？是把两个时间序列进行延伸和缩短，来得到两个时间序列性距离最短也就是最相似的那一个warping，这个最短的距离也就是这两个时间序列的最后的距离度量。在这里，我们要做的就是选择一个路径，使得最后得到的总的距离最小。 这里我们定义一个累加距离cumulative distances。从(0, 0)点开始匹配这两个序列Q和C，每到一个点，之前所有的点计算的距离都会累加。到达终点(n, m)后，这个累积距离就是我们上面说的最后的总的距离，也就是序列Q和C的相似度。 累积距离γ(i,j)可以按下面的方式表示，累积距离γ(i,j)为当前格点距离d(i,j)，也就是点qi和cj的欧式距离（相似性）与可以到达该点的最小的邻近元素的累积距离之和：最佳路径是使得沿路径的积累距离达到最小值这条路径。这条路径可以通过动态规划（dynamic programming）算法得到。]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>DTW</tag>
        <tag>时序数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pandas库使用说明]]></title>
    <url>%2Fzhangyunfeng111.github.io%2F2019%2F08%2F18%2Fpandas%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[pamdas使用说明创建数据集 查看数据 数据选择 读取和保存 筛选数据 增加与删除 计数统计 缺失值处理 排序与合并 可视化操作 字符传操作 广播 数据库操作]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2Fzhangyunfeng111.github.io%2F2019%2F08%2F14%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown语法Markdown的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的目的：用來作為一種網路內容的寫作用語言。 本文约定如果有写 效果如下：， 在 MWeb 编辑状态下只有用 CMD + 4 或 CMD + R 预览才可以看效果。 标题Markdown 语法： 123# 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` 效果如下： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第六级标题 &lt;h6&gt;强调Markdown 语法： 12345*这些文字会生成`&lt;em&gt;`*_这些文字会生成`&lt;u&gt;`_**这些文字会生成`&lt;strong&gt;`**__这些文字会生成`&lt;strong&gt;`__ 在 MWeb 中的快捷键为： CMD + U、CMD + I、CMD + B效果如下： 这些文字会生成&lt;em&gt;_这些文字会生成&lt;u&gt;_ 这些文字会生成&lt;strong&gt;这些文字会生成&lt;strong&gt; 换行四个及以上空格加回车。如果不想打这么多空格，只要回车就为换行，请勾选：Preferences - Themes - Translate newlines to &lt;br&gt; tags 列表无序列表Markdown 语法： 1234* 项目一 无序列表 `* + 空格键`* 项目二 * 项目二的子项目一 无序列表 `TAB + * + 空格键` * 项目二的子项目二 在 MWeb 中的快捷键为： Option + U效果如下： 项目一 无序列表 * + 空格键 项目二 项目二的子项目一 无序列表 TAB + * + 空格键 项目二的子项目二 有序列表Markdown 语法： 123451. 项目一 有序列表 `数字 + . + 空格键`2. 项目二 3. 项目三 1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键` 2. 项目三的子项目二 效果如下： 项目一 有序列表 数字 + . + 空格键 项目二 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 项目三的子项目二 列表中嵌入代码块语法1. 项目一 有序列表 `数字 + . + 空格键` 列表中嵌入代码块必须前后空一行，如这个写法 12345function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 其他文本。 2. 项目二 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： [ ] 任务一 未做任务 - + 空格 + [ ] [x] 任务二 已做任务 - + 空格 + [x] 图片Markdown 语法： 12![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)格式: ![Alt Text](url) Control + Shift + I 可插入Markdown语法。如果是 MWeb 的文档库中的文档，还可以用拖放图片、CMD + V 粘贴、CMD + Option + I 导入这三种方式来增加图片。效果如下： MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 -w + 图片宽度 即可，比如说要设置上面的图片的宽度为 140，语法如为 ![GitHub-w140](set-up-git.gif)： 链接Markdown 语法： 123email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接 &lt;http://www.github.com/&gt; Control + Shift + L 可插入Markdown语法。如果是 MWeb 的文档库中的文档，拖放或CMD + Option + I 导入非图片时，会生成连接。效果如下： Email 连接： &#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#64;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;连接标题Github网站自动生成连接像： http://www.github.com/ 这样 区块引用Markdown 语法： 123某某说:&gt; 第一行引用&gt; 第二行费用文字 CMD + Shift + B 可插入Markdown语法。效果如下： 某某说: 第一行引用第二行费用文字 行内代码Markdown 语法： 1像这样即可：`&lt;addr&gt;` `code` CMD + K 可插入Markdown语法。效果如下： 像这样即可：&lt;addr&gt; code 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; CMD + Shift + K 可插入Markdown语法。效果如下： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 顺序图或流程图Markdown 语法： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 效果如下（ Preferences - Themes - Enable sequence &amp; flow chart 才会看到效果 ）： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 更多请参考：http://bramp.github.io/js-sequence-diagrams/, http://adrai.github.io/flowchart.js/ 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： ~~删除这些~~ 效果如下： 加删除线像这样用： 删除这些 分隔线以下三种方式都可以生成分隔线： *** ***** - - - 效果如下： MathJaxMarkdown 语法： 12345678块级公式：$$ x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ 效果如下（Preferences - Themes - Enable MathJax 才会看到效果）： 块级公式： x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a}\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}{1+\frac{e^{-8\pi}} {1+\ldots} } } } \] 行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$ 脚注（Footnote）Markdown 语法： 1这是一个脚注：[^sample_footnote] 效果如下： 这是一个脚注：sample_footnote sample_footnote. 这里是脚注信息 &#8617; 注释和阅读更多 Actions-&gt;Insert Read More Comment 或者 Command + .注 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。 TOCMarkdown 语法： 1[TOC] 效果如下： [TOC]]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
